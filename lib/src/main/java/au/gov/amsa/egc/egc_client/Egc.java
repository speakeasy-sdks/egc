/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package au.gov.amsa.egc.egc_client;

import au.gov.amsa.egc.egc_client.utils.HTTPClient;
import au.gov.amsa.egc.egc_client.utils.HTTPRequest;
import au.gov.amsa.egc.egc_client.utils.JSON;
import au.gov.amsa.egc.egc_client.utils.SerializedBody;
import au.gov.amsa.egc.egc_client.utils.SpeakeasyHTTPClient;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.apache.http.NameValuePair;

/**
 * EGC API: # EGC API
 * 
 * ## Design considerations
 * 
 * ### Two-phase send
 * 
 * Sending a new MSI is two-phase (create then send). This is
 * because the msiId value is a critical piece of information
 * for the client (to be able to check status and/or cancel)
 * and the API design must ensure that the client is safely 
 * in possession of msiID before a send happens. If the 
 * method was one phase then there would be no guarantee that
 * the msiID was received (a failure could happen in any link
 * in the return snetworking chain like a router, firewall, proxy 
 * server or indeed a problem at the client application end
 * that prevented persistence of the msiID for later use).
 * Moreover, if the method was one phase and a failure in the
 * network chain occurred then not only would an orphan MSI 
 * be sent by the provider but the client would not have
 * knowledge that the MSI had been successfully queued for
 * sending and would naturally retry the send (multiple times
 * even) and we end up with the same MSI being sent 2+ times.
 * 
 * To further clarify the problem being solved by a two phase
 * send here is a [discussion](https://stackoverflow.com/questions/49444723/how-to-make-sure-the-http-response-was-delivered) 
 * of the delivery guarantees of HTTP responses. 
 * 
 * Note that a one phase call where the client generated a new 
 * unique id (using a UUID for instance) is a possible solution 
 * but is less desirable because it introduces a problematic 
 * edge case where the client accidentally uses the same id more
 * than once. If two different messages are sent with the same id
 * (concurrently even) then the service should ensure that only 
 * one message is accepted and that the service consumer is aware 
 * that the other message failed. To do this demands coordination
 * with a single transactional resource (like a relational database) which 
 * also demands that that resource is highly available (relational 
 * databases are often not great at that during upgrade cycles). There 
 * are ways to get high availability (highly available cloud services like 
 * DynamoDB and many more can offer conditional updates) but there is
 * a much simpler way with two-phase. 
 * 
 * If instead of the one-phase call the server creates the msiId and communicates 
 * it to the client then the server side can potentially be scaled
 * with ease if the msiID is a [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier) 
 * for instance (which is effectively unique without coordination
 * with other nodes). 
 * 
 * For example, a highly available and scalable 
 * service could be constructed in AWS cloud using API Gateway with
 * Lambda integrations that for the create message and send actions
 * does this
 * 
 *   * **Create:** Generate a new UUID, place the message content and UUID on 
 * to a queue for processing , return the UUID
 *   * **Send:** Place the UUID parameter on to a queue for processing
 * 
 * A separate component then actions items on the queue(s). When both 
 * the send and create messages have been read then an actual send can take 
 * place. What is clear from this design is that many concurrent nodes could
 * be receiving messages without coordinating with a central node/service 
 * to ensure id uniqueness.
 * 
 * Note also that to support two-phase send the status value of
 *  `CREATED` is included.
 * 
 * ### Pagination
 * 
 * The List MSIs action uses a paginated response as the number of 
 * MSIs in a response can get large. Pagination can reduce server
 * overhead and improve response times. Client-driven pagination is 
 * where the client specifies an offset (skip) field and that number
 * of rows is skipped by the server to return the next page. This
 * can be inefficient for the server-side (see [discussion](
 * https://use-the-index-luke.com/no-offset)) and it is preferred to 
 * use server-driven pagination which is where each page returned 
 * also includes a continuation token to be included in the next page 
 * call. The nice thing about this approach is that the server side
 * can simply return an offset in the continuation token if desired but 
 * we enable more efficient techniques if wanted later.
 * 
 * ### Client specific identifiers
 * 
 * Early versions of this API have suggested the inclusion of a 
 * `NationalSASId` field in the created MSI with the purpose of allowing 
 * a client to correlate an MSI with its internal data. 
 * 
 * This field is a convenience only and thus theoretically should not be
 * included. A client should manage its correlations itself by storing the
 * unique msiId returned by the service paired with its internal identifiers. 
 * 
 * If something is required then it should be labelled something 
 * like `tag` and have arbitrary values so that the client can use it for 
 * anything. Labelling it `NationalSASId` suggests more meaning to the
 * field than it may have. **TODO** confirm.
 * 
 * ### Geometry
 * 
 * Note that the api below allows for float precision locations for 
 * geographic circles and rectangles. An implementation of this API 
 * may choose to use the location with reduced precision (for example
 * lat longs rounded to nearest integer).
 * 
 * ### Cancellation
 * 
 * A PUT to an `/msi/[id}` path ]with content like `{"isCancelled":true}` 
 * has been suggested as a way of cancelling a broadcast. This can be 
 * achieved in a much simpler way with the DELETE verb without content 
 * (a cancel action can be considered as a logical delete in the context
 * of this API). A cancelled broadcast cannot be changed in status but 
 * can be queried. 
 * 
 * ### Abstraction of C-Codes
 * 
 * Initial proposals for the API suggested a partial abstraction of C-Codes. 
 * In particular Priority, MsiType and AreaType were abstracted. This API 
 * demonstrates a full abstraction of C-Codes. It is equivalent to C-Codes
 * but has an easier to read and process representation and the mapping to C-Codes 
 * then becomes a server-side implementation detail. By using the data modelling
 * constructs of OpenAPI v3 and JSON Schema users can generate code for their 
 * API-consuming application that imposes compile-time checking (varies on language)
 * instead of experiencing runtime failures.
 * 
 * **TODO** is there a requirement for full explicit C-Code support (zero 
 * abstraction)?
 * 
 * ### Auth
 * 
 * Initial proposals for this API included a re-authenticate 
 * method whereby a new token was returned if a currently valid token was 
 * supplied. This is a security hole in that anyone in possession of one 
 * valid token (but not the username and password) can stay authenticated 
 * forever. In the same vein, a sensible limit on validity duration of a 
 * token should be imposed so that a leaked token cannot be used for long. 
 * Given the likely usage of the API (in terms of the number of calls made
 * in a time interval by a client) there should be no significant performance
 * penalty forcing a refresh of the token each hour (or even less).
 * 
 * Bearer authentication is used ([RFC6750](https://www.rfc-editor.org/rfc/rfc6750.html#page-5)).
 * Bearer authentication is carried in the `Authorization` request header in this format:
 * 
 *     Authorization: Bearer BASE64_ENCODED_TOKEN
 * 
 * **TODO** The encoded content of the token is not defined (for example, JWT could be used)
 * but is left to the implementer. Should the authentication flow follow an existing 
 * standard like OAuth 2.0? 
 * 
 * ### Naming
 * Previous API drafts used the field names `startDate` and `endDate` for an MSI.
 * Given that those fields refer to timestamps not just dates the names `startTime`
 * and `endTime` have been used.
 * 
 * ### Acknowledgments
 * Iridium can at times provide receive and read acknowledgements. **TODO** get 
 * better documentation of the capability and a proper specification for their
 * response from a list acks call.
 * 
 * ### Timings
 * There may be use cases for the following additional fields on an MSI:
 * 
 * * createdTime
 * * cancelledTime
 * 
 * A user could record in their own systems when they created or cancelled a broadcast 
 * but it might help problem diagnosis if that information was together.
 * 
 * **TODO** confirm
 * 
 * It would also be useful in some circumstances for users to know exactly when a
 * message was broadcast by satellite. Although messages may be scheduled for 
 * immediate or later broadcast there may be significant delays till the broadcast
 * occurs and the user should be able to see the actual broadcast times.
 * 
 * **TODO** discuss with satellite providers
 * 
 */
public class Egc {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        /**
         * Optional server description, e.g. Main (production) server
         */
        "http://api.example.com/v1",
	};
	
	
	
	
	
	
	
  		

	private SDKConfiguration sdkConfiguration;

	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private SDKConfiguration sdkConfiguration = new SDKConfiguration();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.sdkConfiguration.defaultClient = client;
			return this;
		}
		
		/**
		 * Configures the SDK to use the provided security details.
		 * @param security The security details to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setSecurity(au.gov.amsa.egc.egc_client.models.shared.Security security) {
			this.sdkConfiguration.security = security;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.sdkConfiguration.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.sdkConfiguration.serverUrl = au.gov.amsa.egc.egc_client.utils.Utils.templateUrl(serverUrl, params);
			return this;
		}
		
		/**
		 * Allows the overriding of the default server by index
		 * @param serverIdx The server to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerIndex(int serverIdx) {
			this.sdkConfiguration.serverIdx = serverIdx;
			this.sdkConfiguration.serverUrl = SERVERS[serverIdx];
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public Egc build() throws Exception {
			if (this.sdkConfiguration.defaultClient == null) {
				this.sdkConfiguration.defaultClient = new SpeakeasyHTTPClient();
			}
			
			if (this.sdkConfiguration.security != null) {
				this.sdkConfiguration.securityClient = au.gov.amsa.egc.egc_client.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, this.sdkConfiguration.security);
			}
			
			if (this.sdkConfiguration.securityClient == null) {
				this.sdkConfiguration.securityClient = this.sdkConfiguration.defaultClient;
			}
			
			if (this.sdkConfiguration.serverUrl == null || this.sdkConfiguration.serverUrl.isBlank()) {
				this.sdkConfiguration.serverUrl = SERVERS[0];
				this.sdkConfiguration.serverIdx = 0;
			}

			if (this.sdkConfiguration.serverUrl.endsWith("/")) {
				this.sdkConfiguration.serverUrl = this.sdkConfiguration.serverUrl.substring(0, this.sdkConfiguration.serverUrl.length() - 1);
			}
			
			return new Egc(this.sdkConfiguration);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private Egc(SDKConfiguration sdkConfiguration) throws Exception {
		this.sdkConfiguration = sdkConfiguration;
	}

    /**
     * Cancel MSI
     * This is a logical delete of a broadcast in that it
     * prevents future broadcasts happening for this msiId
     * (be it a single or repeating broadcast). Once cancelled
     * an MSI cannot be resent. However, the broadcast details 
     * are still available to be queried.
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public au.gov.amsa.egc.egc_client.models.operations.CancelMsiResponse cancelMsi(au.gov.amsa.egc.egc_client.models.operations.CancelMsiRequest request) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = au.gov.amsa.egc.egc_client.utils.Utils.generateURL(au.gov.amsa.egc.egc_client.models.operations.CancelMsiRequest.class, baseUrl, "/msi/{id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "application/json;q=1, text/*;q=0");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");
        
        au.gov.amsa.egc.egc_client.models.operations.CancelMsiResponse res = new au.gov.amsa.egc.egc_client.models.operations.CancelMsiResponse(contentType, httpRes.statusCode(), httpRes) {{
            error = null;
            fourHundredTextWildcardRes = null;
            error = null;
            fourHundredAndOneTextWildcardRes = null;
            error = null;
            fourHundredAndThreeTextWildcardRes = null;
            error = null;
            fourHundredAndFourTextWildcardRes = null;
            error = null;
            fiveHundredTextWildcardRes = null;
        }};
        
        if (httpRes.statusCode() == 204) {
        }
        else if (httpRes.statusCode() == 400) {
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                au.gov.amsa.egc.egc_client.models.shared.ErrorInput out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), au.gov.amsa.egc.egc_client.models.shared.ErrorInput.class);
                res.error = out;
            }
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "text/*")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.fourHundredTextWildcardRes = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                au.gov.amsa.egc.egc_client.models.shared.ErrorInput out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), au.gov.amsa.egc.egc_client.models.shared.ErrorInput.class);
                res.error = out;
            }
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "text/*")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.fourHundredAndOneTextWildcardRes = out;
            }
        }
        else if (httpRes.statusCode() == 403) {
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                au.gov.amsa.egc.egc_client.models.shared.ErrorInput out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), au.gov.amsa.egc.egc_client.models.shared.ErrorInput.class);
                res.error = out;
            }
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "text/*")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.fourHundredAndThreeTextWildcardRes = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                au.gov.amsa.egc.egc_client.models.shared.ErrorInput out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), au.gov.amsa.egc.egc_client.models.shared.ErrorInput.class);
                res.error = out;
            }
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "text/*")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.fourHundredAndFourTextWildcardRes = out;
            }
        }
        else if (httpRes.statusCode() == 500) {
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                au.gov.amsa.egc.egc_client.models.shared.ErrorInput out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), au.gov.amsa.egc.egc_client.models.shared.ErrorInput.class);
                res.error = out;
            }
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "text/*")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.fiveHundredTextWildcardRes = out;
            }
        }

        return res;
    }

    /**
     * Create MSI
     * Submits message content and returns a unique id (across all 
     * users) that is to be used in the send method. It is ok for
     * a message to never be sent but the provider should have the 
     * freedom to clean up (delete) unsent messages after some 
     * reasonable period or after more than N unsent messages are created.
     * (**TODO** ask providers what is reasonable minimum period and 
     * maximum number of unsent messages so it can be documented here). 
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public au.gov.amsa.egc.egc_client.models.operations.CreateMsiResponse createMsi(au.gov.amsa.egc.egc_client.models.shared.MsiContent request) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = au.gov.amsa.egc.egc_client.utils.Utils.generateURL(baseUrl, "/msi");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = au.gov.amsa.egc.egc_client.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json;q=1, text/*;q=0");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");
        
        au.gov.amsa.egc.egc_client.models.operations.CreateMsiResponse res = new au.gov.amsa.egc.egc_client.models.operations.CreateMsiResponse(contentType, httpRes.statusCode(), httpRes) {{
            twoHundredAndOneApplicationJsonMsiId = null;
            error = null;
            fourHundredTextWildcardRes = null;
            error = null;
            fourHundredAndOneTextWildcardRes = null;
            error = null;
            fourHundredAndThreeTextWildcardRes = null;
            error = null;
            fiveHundredTextWildcardRes = null;
        }};
        
        if (httpRes.statusCode() == 201) {
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "application/json")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.twoHundredAndOneApplicationJsonMsiId = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                au.gov.amsa.egc.egc_client.models.shared.ErrorInput out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), au.gov.amsa.egc.egc_client.models.shared.ErrorInput.class);
                res.error = out;
            }
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "text/*")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.fourHundredTextWildcardRes = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                au.gov.amsa.egc.egc_client.models.shared.ErrorInput out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), au.gov.amsa.egc.egc_client.models.shared.ErrorInput.class);
                res.error = out;
            }
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "text/*")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.fourHundredAndOneTextWildcardRes = out;
            }
        }
        else if (httpRes.statusCode() == 403) {
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                au.gov.amsa.egc.egc_client.models.shared.ErrorInput out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), au.gov.amsa.egc.egc_client.models.shared.ErrorInput.class);
                res.error = out;
            }
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "text/*")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.fourHundredAndThreeTextWildcardRes = out;
            }
        }
        else if (httpRes.statusCode() == 500) {
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                au.gov.amsa.egc.egc_client.models.shared.ErrorInput out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), au.gov.amsa.egc.egc_client.models.shared.ErrorInput.class);
                res.error = out;
            }
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "text/*")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.fiveHundredTextWildcardRes = out;
            }
        }

        return res;
    }

    /**
     * Get MSI
     * Returns the details of an MSI broadcast using the unique MSI identifier.
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public au.gov.amsa.egc.egc_client.models.operations.GetMsiResponse getMsi(au.gov.amsa.egc.egc_client.models.operations.GetMsiRequest request) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = au.gov.amsa.egc.egc_client.utils.Utils.generateURL(au.gov.amsa.egc.egc_client.models.operations.GetMsiRequest.class, baseUrl, "/msi/{id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json;q=1, text/*;q=0");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");
        
        au.gov.amsa.egc.egc_client.models.operations.GetMsiResponse res = new au.gov.amsa.egc.egc_client.models.operations.GetMsiResponse(contentType, httpRes.statusCode(), httpRes) {{
            twoHundredApplicationJsonMsi = null;
            error = null;
            fourHundredTextWildcardRes = null;
            error = null;
            fourHundredAndOneTextWildcardRes = null;
            error = null;
            fourHundredAndThreeTextWildcardRes = null;
            error = null;
            fourHundredAndFourTextWildcardRes = null;
            error = null;
            fiveHundredTextWildcardRes = null;
        }};
        
        if (httpRes.statusCode() == 200) {
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.twoHundredApplicationJsonMsi = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                au.gov.amsa.egc.egc_client.models.shared.ErrorInput out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), au.gov.amsa.egc.egc_client.models.shared.ErrorInput.class);
                res.error = out;
            }
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "text/*")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.fourHundredTextWildcardRes = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                au.gov.amsa.egc.egc_client.models.shared.ErrorInput out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), au.gov.amsa.egc.egc_client.models.shared.ErrorInput.class);
                res.error = out;
            }
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "text/*")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.fourHundredAndOneTextWildcardRes = out;
            }
        }
        else if (httpRes.statusCode() == 403) {
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                au.gov.amsa.egc.egc_client.models.shared.ErrorInput out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), au.gov.amsa.egc.egc_client.models.shared.ErrorInput.class);
                res.error = out;
            }
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "text/*")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.fourHundredAndThreeTextWildcardRes = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                au.gov.amsa.egc.egc_client.models.shared.ErrorInput out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), au.gov.amsa.egc.egc_client.models.shared.ErrorInput.class);
                res.error = out;
            }
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "text/*")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.fourHundredAndFourTextWildcardRes = out;
            }
        }
        else if (httpRes.statusCode() == 500) {
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                au.gov.amsa.egc.egc_client.models.shared.ErrorInput out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), au.gov.amsa.egc.egc_client.models.shared.ErrorInput.class);
                res.error = out;
            }
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "text/*")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.fiveHundredTextWildcardRes = out;
            }
        }

        return res;
    }

    /**
     * Get status of an MSI
     * Returns the status of an MSI broadcast using the unique MSI identifier.
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public au.gov.amsa.egc.egc_client.models.operations.GetMsiStatusResponse getMsiStatus(au.gov.amsa.egc.egc_client.models.operations.GetMsiStatusRequest request) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = au.gov.amsa.egc.egc_client.utils.Utils.generateURL(au.gov.amsa.egc.egc_client.models.operations.GetMsiStatusRequest.class, baseUrl, "/msi/{id}/status", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json;q=1, text/*;q=0");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");
        
        au.gov.amsa.egc.egc_client.models.operations.GetMsiStatusResponse res = new au.gov.amsa.egc.egc_client.models.operations.GetMsiStatusResponse(contentType, httpRes.statusCode(), httpRes) {{
            statusExtended = null;
            error = null;
            fourHundredTextWildcardRes = null;
            error = null;
            fourHundredAndOneTextWildcardRes = null;
            error = null;
            fourHundredAndThreeTextWildcardRes = null;
            error = null;
            fourHundredAndFourTextWildcardRes = null;
            error = null;
            fiveHundredTextWildcardRes = null;
        }};
        
        if (httpRes.statusCode() == 200) {
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                au.gov.amsa.egc.egc_client.models.shared.StatusExtended out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), au.gov.amsa.egc.egc_client.models.shared.StatusExtended.class);
                res.statusExtended = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                au.gov.amsa.egc.egc_client.models.shared.ErrorInput out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), au.gov.amsa.egc.egc_client.models.shared.ErrorInput.class);
                res.error = out;
            }
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "text/*")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.fourHundredTextWildcardRes = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                au.gov.amsa.egc.egc_client.models.shared.ErrorInput out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), au.gov.amsa.egc.egc_client.models.shared.ErrorInput.class);
                res.error = out;
            }
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "text/*")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.fourHundredAndOneTextWildcardRes = out;
            }
        }
        else if (httpRes.statusCode() == 403) {
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                au.gov.amsa.egc.egc_client.models.shared.ErrorInput out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), au.gov.amsa.egc.egc_client.models.shared.ErrorInput.class);
                res.error = out;
            }
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "text/*")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.fourHundredAndThreeTextWildcardRes = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                au.gov.amsa.egc.egc_client.models.shared.ErrorInput out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), au.gov.amsa.egc.egc_client.models.shared.ErrorInput.class);
                res.error = out;
            }
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "text/*")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.fourHundredAndFourTextWildcardRes = out;
            }
        }
        else if (httpRes.statusCode() == 500) {
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                au.gov.amsa.egc.egc_client.models.shared.ErrorInput out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), au.gov.amsa.egc.egc_client.models.shared.ErrorInput.class);
                res.error = out;
            }
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "text/*")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.fiveHundredTextWildcardRes = out;
            }
        }

        return res;
    }

    /**
     * List MSIs
     * Returns Maritime Safety Information broadcasts requested to
     * be sent by the user. 
     * 
     * Note that none of the parameters are required. If no parameters
     * are supplied then all MSIs for the current user will be returned
     * (paged).
     * 
     * The `limit` field may not be honoured exactly by the server
     * side (in that it might exceed a maximum limit of the server).
     * 
     * The results of this query may return in any order and that order
     * may vary in repeated calls (for example, the returned MSIs *may* 
     * not be ordered by timestamp). If the client requires an ordering
     * by time then all pages should be requested and then sorted 
     * client-side. **TODO** confirm expectations
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public au.gov.amsa.egc.egc_client.models.operations.GetMsisResponse getMsis(au.gov.amsa.egc.egc_client.models.operations.GetMsisRequest request) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = au.gov.amsa.egc.egc_client.utils.Utils.generateURL(baseUrl, "/msi");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json;q=1, text/*;q=0");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);
        java.util.List<NameValuePair> queryParams = au.gov.amsa.egc.egc_client.utils.Utils.getQueryParams(au.gov.amsa.egc.egc_client.models.operations.GetMsisRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");
        
        au.gov.amsa.egc.egc_client.models.operations.GetMsisResponse res = new au.gov.amsa.egc.egc_client.models.operations.GetMsisResponse(contentType, httpRes.statusCode(), httpRes) {{
            twoHundredApplicationJsonObject = null;
            error = null;
            fourHundredTextWildcardRes = null;
            error = null;
            fourHundredAndOneTextWildcardRes = null;
            error = null;
            fourHundredAndThreeTextWildcardRes = null;
            error = null;
            fiveHundredTextWildcardRes = null;
        }};
        
        if (httpRes.statusCode() == 200) {
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                au.gov.amsa.egc.egc_client.models.operations.GetMsisResponseBody out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), au.gov.amsa.egc.egc_client.models.operations.GetMsisResponseBody.class);
                res.twoHundredApplicationJsonObject = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                au.gov.amsa.egc.egc_client.models.shared.ErrorInput out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), au.gov.amsa.egc.egc_client.models.shared.ErrorInput.class);
                res.error = out;
            }
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "text/*")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.fourHundredTextWildcardRes = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                au.gov.amsa.egc.egc_client.models.shared.ErrorInput out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), au.gov.amsa.egc.egc_client.models.shared.ErrorInput.class);
                res.error = out;
            }
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "text/*")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.fourHundredAndOneTextWildcardRes = out;
            }
        }
        else if (httpRes.statusCode() == 403) {
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                au.gov.amsa.egc.egc_client.models.shared.ErrorInput out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), au.gov.amsa.egc.egc_client.models.shared.ErrorInput.class);
                res.error = out;
            }
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "text/*")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.fourHundredAndThreeTextWildcardRes = out;
            }
        }
        else if (httpRes.statusCode() == 500) {
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                au.gov.amsa.egc.egc_client.models.shared.ErrorInput out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), au.gov.amsa.egc.egc_client.models.shared.ErrorInput.class);
                res.error = out;
            }
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "text/*")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.fiveHundredTextWildcardRes = out;
            }
        }

        return res;
    }

    /**
     * Authenticate
     * Obtains a token that will be passed in a request header to calls
     * to other paths on this API for authentication and authorization
     * purposes.
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public au.gov.amsa.egc.egc_client.models.operations.GetTokenResponse getToken(au.gov.amsa.egc.egc_client.models.shared.AuthenticationRequestBody request) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = au.gov.amsa.egc.egc_client.utils.Utils.generateURL(baseUrl, "/authenticate");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = au.gov.amsa.egc.egc_client.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json;q=1, text/*;q=0");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");
        
        au.gov.amsa.egc.egc_client.models.operations.GetTokenResponse res = new au.gov.amsa.egc.egc_client.models.operations.GetTokenResponse(contentType, httpRes.statusCode(), httpRes) {{
            authenticationResponse = null;
            error = null;
            fourHundredTextWildcardRes = null;
            error = null;
            fourHundredAndOneTextWildcardRes = null;
            error = null;
            fiveHundredTextWildcardRes = null;
        }};
        
        if (httpRes.statusCode() == 200) {
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                au.gov.amsa.egc.egc_client.models.shared.AuthenticationResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), au.gov.amsa.egc.egc_client.models.shared.AuthenticationResponse.class);
                res.authenticationResponse = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                au.gov.amsa.egc.egc_client.models.shared.Error out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), au.gov.amsa.egc.egc_client.models.shared.Error.class);
                res.error = out;
            }
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "text/*")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.fourHundredTextWildcardRes = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                au.gov.amsa.egc.egc_client.models.shared.Error out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), au.gov.amsa.egc.egc_client.models.shared.Error.class);
                res.error = out;
            }
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "text/*")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.fourHundredAndOneTextWildcardRes = out;
            }
        }
        else if (httpRes.statusCode() == 500) {
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                au.gov.amsa.egc.egc_client.models.shared.Error out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), au.gov.amsa.egc.egc_client.models.shared.Error.class);
                res.error = out;
            }
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "text/*")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.fiveHundredTextWildcardRes = out;
            }
        }

        return res;
    }

    /**
     * Send MSI
     * Requests that an existing unsent MSI be sent. If the MSI 
     * has already been sent or the MSI has been cancelled then 
     * nothing occurs (this method is idempotent). 
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public au.gov.amsa.egc.egc_client.models.operations.SendMsiResponse sendMsi(au.gov.amsa.egc.egc_client.models.operations.SendMsiRequest request) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = au.gov.amsa.egc.egc_client.utils.Utils.generateURL(au.gov.amsa.egc.egc_client.models.operations.SendMsiRequest.class, baseUrl, "/msi/{id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);

        req.addHeader("Accept", "application/json;q=1, text/*;q=0");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");
        
        au.gov.amsa.egc.egc_client.models.operations.SendMsiResponse res = new au.gov.amsa.egc.egc_client.models.operations.SendMsiResponse(contentType, httpRes.statusCode(), httpRes) {{
            error = null;
            fourHundredTextWildcardRes = null;
            error = null;
            fourHundredAndOneTextWildcardRes = null;
            error = null;
            fourHundredAndThreeTextWildcardRes = null;
            error = null;
            fourHundredAndFourTextWildcardRes = null;
            error = null;
            fiveHundredTextWildcardRes = null;
        }};
        
        if (httpRes.statusCode() == 204) {
        }
        else if (httpRes.statusCode() == 400) {
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                au.gov.amsa.egc.egc_client.models.shared.ErrorInput out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), au.gov.amsa.egc.egc_client.models.shared.ErrorInput.class);
                res.error = out;
            }
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "text/*")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.fourHundredTextWildcardRes = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                au.gov.amsa.egc.egc_client.models.shared.ErrorInput out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), au.gov.amsa.egc.egc_client.models.shared.ErrorInput.class);
                res.error = out;
            }
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "text/*")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.fourHundredAndOneTextWildcardRes = out;
            }
        }
        else if (httpRes.statusCode() == 403) {
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                au.gov.amsa.egc.egc_client.models.shared.ErrorInput out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), au.gov.amsa.egc.egc_client.models.shared.ErrorInput.class);
                res.error = out;
            }
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "text/*")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.fourHundredAndThreeTextWildcardRes = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                au.gov.amsa.egc.egc_client.models.shared.ErrorInput out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), au.gov.amsa.egc.egc_client.models.shared.ErrorInput.class);
                res.error = out;
            }
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "text/*")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.fourHundredAndFourTextWildcardRes = out;
            }
        }
        else if (httpRes.statusCode() == 500) {
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                au.gov.amsa.egc.egc_client.models.shared.ErrorInput out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), au.gov.amsa.egc.egc_client.models.shared.ErrorInput.class);
                res.error = out;
            }
            if (au.gov.amsa.egc.egc_client.utils.Utils.matchContentType(contentType, "text/*")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.fiveHundredTextWildcardRes = out;
            }
        }

        return res;
    }
}