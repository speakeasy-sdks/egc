/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package au.gov.amsa.egc.egc_client.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * StatusExtended - The `message` property is expected to be used when the status is 
 * BROADCAST_ERROR or CANCEL_ERROR and might describe a problem with 
 * the submitted message or a problem with the delivery of the message
 * on the part of the satellite service provider. In general message 
 * problems should be discovered at the message creation step (and a
 * suitable error message returned synchronously when that call made).
 * However, we need to be able to represent an unexpected or 
 * asynchronously discovered problem also (be it caused by a bad 
 * message or by a satellite service provider problem). 
 * 
 */

public class StatusExtended {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("message")
    public String message;

    public StatusExtended withMessage(String message) {
        this.message = message;
        return this;
    }
    
    /**
     * ACTIVE means that the MSI has been taken off the submission queue
     * and marked as ready for broadcast (either immediately or at the next 
     * scheduled time depending on the type of broadcast). TODO discuss 
     * with satellite providers what this represents for them so that we can
     * end up with a common significance for clients.
     * 
     * These are the expected transitions between states (in PlantUML format):
     * 
     */
    @JsonProperty("status")
    public Status status;

    public StatusExtended withStatus(Status status) {
        this.status = status;
        return this;
    }
    
    public StatusExtended(@JsonProperty("status") Status status) {
        this.status = status;
  }
}
