/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package au.gov.amsa.egc.egc_client.models.shared;

import au.gov.amsa.egc.egc_client.utils.DateTimeDeserializer;
import au.gov.amsa.egc.egc_client.utils.DateTimeSerializer;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;

/**
 * MsiContent - Used to create a new MSI. `repetition` is optional. If omitted
 * once only is assumed (no repetition). `startTime` and
 * `endTime` are optional fields and 0, 1 or both can be
 * present.
 * 
 */

public class MsiContent {
    /**
     * the details of the broadcast particular to the broadcast type
     */
    @JsonProperty("broadcast")
    public Object broadcast;

    public MsiContent withBroadcast(Object broadcast) {
        this.broadcast = broadcast;
        return this;
    }
    
    /**
     * If the satellite provider supports echo then setting this field to true
     * will request a repeat broadcast is made a short time after the first 
     * (Inmarsat applies a 6 minute interval). Consult the satellite provider
     * documentation about under what circumstances the echo will be honoured.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("echo")
    public Boolean echo;

    public MsiContent withEcho(Boolean echo) {
        this.echo = echo;
        return this;
    }
    
    /**
     * the time after which no more broadcasts should be made of this MSI.
     * This field may or may not be honoured by the service provider. The 
     * service provider may expect an explicit cancellation for ongoing
     * broadcasts (like CAT-B). TODO confirm
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("endTime")
    public OffsetDateTime endTime;

    public MsiContent withEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }
    
    /**
     * the ASCII message text to broadcast. **TODO** what max length is appropriate?
     * 
     */
    @JsonProperty("payload")
    public String payload;

    public MsiContent withPayload(String payload) {
        this.payload = payload;
        return this;
    }
    
    /**
     * If the satellite provider supports read acknowledgements then setting this 
     * field to true will enable acknowledgements to the satellite provider
     * that the message has been read by the receiving vessel.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("readAcksEnabled")
    public Boolean readAcksEnabled;

    public MsiContent withReadAcksEnabled(Boolean readAcksEnabled) {
        this.readAcksEnabled = readAcksEnabled;
        return this;
    }
    
    /**
     * If the satellite provider supports receive acknowledgements then setting this 
     * field to true will enable acknowledgements to the satellite provider
     * that the message has been received by the vessel.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("receiveAcksEnabled")
    public Boolean receiveAcksEnabled;

    public MsiContent withReceiveAcksEnabled(Boolean receiveAcksEnabled) {
        this.receiveAcksEnabled = receiveAcksEnabled;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("repetition")
    public Repetition repetition;

    public MsiContent withRepetition(Repetition repetition) {
        this.repetition = repetition;
        return this;
    }
    
    /**
     * the scheduled time of the initial broadcast. If omitted is assumed
     * to be ASAP. A delayed start may not be supported by the service 
     * provider, check service provider documentation. TODO confirm
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("startTime")
    public OffsetDateTime startTime;

    public MsiContent withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }
    
    public MsiContent(@JsonProperty("broadcast") Object broadcast, @JsonProperty("payload") String payload) {
        this.broadcast = broadcast;
        this.payload = payload;
  }
}
